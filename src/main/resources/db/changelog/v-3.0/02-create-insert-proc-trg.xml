<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                            http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd">

<!--    1. Написать процедуру добавления P2P проверки-->
    <changeSet id="v-2.0-create-p2p-insert-procedure" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE PROCEDURE pr_p2p_insert(IN peer_checked_ text, IN peer_checking_ text, IN task_ varchar, IN status_ varchar, IN time_ time)
            LANGUAGE plpgsql AS $$
            DECLARE
                check_id_tmp integer := 0;
            BEGIN
                IF status_ = 'Start'
                THEN -- Если задан статус "начало", добавить запись в таблицу Checks (в качестве даты использовать сегодняшнюю)
                    IF NOT EXISTS(
                        SELECT checks.id, p1.state
                        FROM checks
                                 JOIN p2p p1 ON checks.id = p1.check_id AND p1.state = 'Start'
                        WHERE NOT EXISTS ( SELECT p2.check_id
                                           FROM p2p p2
                                           WHERE p2.check_id = checks.id
                                             AND NOT p2.state = 'Start' )
                          AND task = task_
                          AND peer = peer_checked_
                          AND p1.checking_peer = peer_checking_
                          AND "date" = now()::date
                    )
                    THEN -- нет незавершенной P2P проверки, относящейся к конкретному заданию, пиру и проверяющему
                        INSERT INTO checks(peer, task, "date") VALUES (peer_checked_, task_, now()::date) RETURNING id INTO check_id_tmp;
                        INSERT INTO p2p(check_id, checking_peer, state, "time") VALUES (check_id_tmp, peer_checking_, status_, time_::time);
                    ELSE
                        RAISE NOTICE 'p2p_insert error, has more one start state in table, with parameters: % % % %', check_id_tmp, peer_checking_, status_, time_::time;
                    END IF;
                ELSE -- Иначе указать проверку с самым поздним (по времени) незавершенным P2P этапом
                    -- Находим check_id, последней начавшейся проверки
                    check_id_tmp := (SELECT checks.id
                                 FROM checks
                                          JOIN p2p on check_id = checks.id
                                 WHERE task = task_
                                   AND state = 'Start'
                                   AND peer = peer_checked_
                                   AND checking_peer = peer_checking_
                                   AND "date" = now()::date
                                   AND time &lt;= time_
                                 ORDER BY "time" DESC
                                 LIMIT 1);
                    IF check_id_tmp != 0
                    THEN -- Если нашли, то добавляем запись в таблицу p2p с данным check_id
                        INSERT INTO p2p(check_id, checking_peer, state, "time") VALUES (check_id_tmp, peer_checking_, status_, time_::time);
                    ELSE
                        RAISE NOTICE 'p2p_insert error, could not find check with start status, with parameters: % % % %', check_id_tmp, peer_checking_, status_, time_::time;
                    END IF;
                END IF;
        END;$$;
        </sql>
    </changeSet>

<!--    2. Написать процедуру добавления проверки Verter'ом-->
    <changeSet id="v-2.0-create-verter-insert-procedure" author="m3mpm">
    <sql endDelimiter="\nGO"
         splitStatements="true"
         stripComments="true">
        CREATE OR REPLACE PROCEDURE pr_verter_insert(IN peer_checked_ text, IN task_ varchar, IN status_ varchar, IN time_ time)
        LANGUAGE plpgsql AS $$
        DECLARE
            check_id integer := 0;
        BEGIN
            check_id := (SELECT c.id
                         FROM checks c
                          JOIN p2p p on p.check_id = c.id
                         WHERE state = 'Success'
                           AND task = task_
                           AND peer = peer_checked_
                           AND "date" = now()::date
                           AND time &lt;= time_
                         ORDER BY "time" DESC
                         LIMIT 1);
            IF status_ = 'Start' AND check_id != 0
            THEN
                IF not exists(  SELECT checks.id, v1.state
                                FROM checks
                                JOIN verter v1 ON checks.id = v1.check_id AND v1.state = 'Start'
                                WHERE NOT EXISTS ( SELECT v2.check_id
                                                    FROM verter v2
                                                    WHERE v2.check_id = checks.id
                                                    AND NOT v2.state = 'Start' )
                                AND task = task_
                                AND peer = peer_checked_
                                AND "date" = now()::date)
                THEN
                    INSERT INTO verter(check_id, state, "time") VALUES (check_id, status_, time_);
                ELSE
                    RAISE NOTICE 'verter_insert error, has more one start state in table, with parameters: % % %', check_id, status_, time_;
                END IF;
            ELSE
                IF check_id != 0
                THEN
                    INSERT INTO verter(check_id, state, "time") VALUES (check_id, status_, time_);
                ELSE
                    RAISE NOTICE 'pr_verter_insert error, could not find check with start status, with parameters: % % %', check_id, status_, time_;
                END IF;
            END IF;
        END;$$;
    </sql>
    </changeSet>

<!--    Дополнительная процедура для заполнения данных в xp таблицу-->
    <changeSet id="v-2.0-create-xp-insert-procedure" author="m3mpm">
    <sql endDelimiter="\nGO"
         splitStatements="true"
         stripComments="true">
        CREATE OR REPLACE PROCEDURE pr_xp_insert (IN peer_checked_ text, IN task_ varchar, IN starttime_ time, IN percentxp_ integer)
        LANGUAGE plpgsql AS $$
        DECLARE
            check_id integer := 0;
            xp_ integer := (SELECT max_xp FROM tasks WHERE title = task_) * percentxp_ / 100;
        BEGIN
            check_id := (SELECT c.id FROM checks c
                         JOIN p2p p on c.id = p.check_id
                         WHERE p.state = 'Start' AND c.peer = peer_checked_ AND c.task = task_ AND p.time = starttime_);
            IF check_id != 0
            THEN
                INSERT INTO xp(check_id, xp_amount) VALUES (check_id, xp_);
            ELSE
                RAISE NOTICE 'pr_xp_insert error, could not find check with start status, with parameters: % %', check_id, xp_;
            END IF;
        END;$$;
    </sql>
    </changeSet>

<!--    3. Написать триггер: после добавления записи со статутом "начало" в таблицу P2P, изменить соответствующую запись в таблице transferred_points-->
<!--    Функция внесения изменения в таблице transferred_points, когда сработает триггер-->
    <changeSet id="v-2.0-create-fnc_trg_TransferredPoints_insert_audit-func" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION pr_trg_TransferredPoints_insert_audit() RETURNS trigger
            LANGUAGE plpgsql AS $$
            DECLARE
                checked_name text;
            BEGIN
                -- найти проверяемого(checked) через таблицу p2p
                checked_name := (SELECT peer
                                 FROM checks
                                 WHERE id = new.check_id);
                IF new.state = 'Start'
                    THEN
                        -- проверка была ли раньше запись о этой паре проверяющий+проверяемый
                        IF exists(SELECT *
                                  FROM transferred_points
                                  WHERE checking_peer = new.checking_peer
                                    AND checked_peer = checked_name)
                       THEN
                            -- прибавляем +1 к pointsamount имеющийся записи
                            UPDATE transferred_points
                            SET points_amount=points_amount + 1
                            WHERE checking_peer = new.checking_peer AND checked_peer = checked_name;
                        ELSE
                        -- если не было записи с такими пирами в transferredpoints - добавляем новую запись в таблицу
                            INSERT INTO transferred_points(checking_peer,checked_peer,points_amount) VALUES(new.checking_peer, checked_name, 1);
                        END IF;
                    END IF;
            RETURN new;
            END;$$;
        </sql>
    </changeSet>

<!--    Создание триггера, если происходит добавление записи в таблицу p2p, то происходит запись в таблицу transferred_points-->
    <changeSet id="v-2.0-create-p2p-transferred_points-trg" author="m3mpm">
    <sql endDelimiter="\nGO"
         splitStatements="true"
         stripComments="true">
        CREATE OR REPLACE TRIGGER trg_TransferredPoints_insert_audit
            AFTER INSERT
            ON p2p
            FOR EACH ROW
        EXECUTE PROCEDURE pr_trg_TransferredPoints_insert_audit();
    </sql>
    </changeSet>


<!--    4. Написать триггер: перед добавлением записи в таблицу XP, проверить корректность добавляемой записи-->
<!--    Функция проверки корректности добавляемой записи-->
    <changeSet id="v-2.0-create-fnc_trg_XP_insert_audit-func" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_trg_XP_insert_audit() RETURNS trigger
            LANGUAGE plpgsql AS $$
            BEGIN
                -- Количество XP не превышает максимальное доступное для проверяемой задачи
                IF new.xp_amount &lt;= (SELECT max_xp
                                        FROM checks
                                             JOIN tasks t on t.title = checks.task
                                        AND checks.id = new.check_id)
                    -- Поле Check ссылается на успешную проверку
                    AND exists( SELECT p.check_id
                                FROM p2p p
                                LEFT JOIN verter v ON p.check_id = v.check_id
                                WHERE p.state = 'Success' AND (v.state = 'Success' OR v.state IS NULL)
                                    AND p.check_id=new.check_id)
                THEN
                    RETURN new;
                ELSE
                    raise notice 'XP_insert error, the amount of XP is more than the maximum available or could not find check with success status, with parameters: % % %', new.check_id, new.id, new.xp_amount;
                    RETURN NULL;
                END IF;
            END;$$;
        </sql>
    </changeSet>

<!--    Создание триггера проверки корректоности данных перед добавление записи в таблицу XP-->
    <changeSet id="v-2.0-create-xp-check-insert-trg-1" author="m3mpm">
    <sql endDelimiter="\nGO"
         splitStatements="true"
         stripComments="true">
        CREATE OR REPLACE TRIGGER trg_XP_insert_audit
            BEFORE INSERT
            ON XP
            FOR EACH ROW
        EXECUTE PROCEDURE fnc_trg_XP_insert_audit();
    </sql>
    </changeSet>

<!--    Создание триггера проверки корректоности данных перед обновление записи в таблице XP-->
    <changeSet id="v-2.0-create-xp-check-update-trg-2" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE TRIGGER trg_XP_insert_audit
                BEFORE UPDATE
                ON XP
                FOR EACH ROW
            EXECUTE PROCEDURE fnc_trg_XP_insert_audit();
        </sql>
    </changeSet>

</databaseChangeLog>
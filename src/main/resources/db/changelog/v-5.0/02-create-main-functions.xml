<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                            http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd">

    <!--    1) Написать функцию, возвращающую таблицу TransferredPoints в более человекочитаемом виде-->
    <changeSet id="v-5.0-create-fnc_task1" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task1()
            RETURNS TABLE ("Peer1" varchar, "Peer2" varchar, "PointsAmount" integer)
            AS $$
                WITH tmp AS (
                    SELECT tp.checking_peer, tp.checked_peer, tp.points_amount FROM transferred_points tp
                    JOIN transferred_points t2 ON t2.checking_peer = tp.checked_peer
                    AND t2.checked_peer = tp.checking_peer AND tp.id &lt; t2.id
                )
                (SELECT checking_peer, checked_peer, sum(res.points_amount)
                FROM (SELECT f.checking_peer, f.checked_peer, f.points_amount FROM transferred_points f
                    UNION
                    SELECT t.checked_peer, t.checking_peer, -t.points_amount FROM tmp t) AS res
                GROUP BY 1, 2)
                EXCEPT
            SELECT t.checking_peer, t.checked_peer, t.points_amount FROM tmp t
            ORDER BY 1;
            $$ LANGUAGE sql;
        </sql>
    </changeSet>

    <!--    2) Написать функцию, которая возвращает таблицу вида: ник пользователя, название проверенного задания, кол-во полученного XP-->
    <changeSet id="v-5.0-create-fnc_task2" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task2()
            RETURNS TABLE ("Peer" varchar, "Task" varchar, "XP" integer) AS $$
            SELECT ch.peer, ch.task, xp.xp_amount
            FROM mv_checks ch
                     JOIN xp ON xp.check_id = ch.id
            WHERE ch.state = 'Success'
            ORDER BY 1, 3 DESC;
            $$ LANGUAGE sql;
        </sql>
    </changeSet>

    <!--    3) Написать функцию, определяющую пиров, которые не выходили из кампуса в течение всего дня-->
    <changeSet id="v-5.0-create-fnc_task3" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task3(IN pdate date)
            RETURNS TABLE (peer VARCHAR) AS $$
            SELECT peer FROM time_tracking
            WHERE date = pdate AND state = '1'
            GROUP BY peer
            HAVING count(state) = 1;
            $$ LANGUAGE sql;
        </sql>
    </changeSet>

    <!--    4) Найти процент успешных и неуспешных проверок за всё время-->
    <changeSet id="v-5.0-create-fnc_task4" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task4()
                RETURNS TABLE ("SuccessfulChecks" numeric, "UnsuccessfulChecks" numeric)
            AS $$
                DECLARE
            Success integer := (SELECT count(*) FROM mv_checks ch WHERE ch.state = 'Success');
                    Failure integer := (SELECT count(*) FROM mv_checks ch WHERE ch.state = 'Failure');
            BEGIN
            RETURN QUERY SELECT
                                     CASE
                                         WHEN (Success + Failure) != 0 THEN
                                             round(Success * 100 / (Success + Failure)::numeric)
                                         ELSE 0
            END AS "SuccessfulChecks",
                                     CASE
                                         WHEN (Success + Failure) != 0 THEN
                                             round(Failure * 100 / (Success + Failure)::numeric)
                                         ELSE 0
            END AS "UnsuccessfulChecks";
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    5) Посчитать изменение в количестве пир поинтов каждого пира по таблице TransferredPoints-->
    <changeSet id="v-5.0-create-helper-fnc_get_peer_points_change-task5" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_get_peer_points_change(IN peername text)
                RETURNS integer
            AS $$
            BEGIN
                    -- кол-во заработанных поинтов если пир есть в столбце checking_peer
            RETURN (SELECT COALESCE((SELECT(sum(points_amount)) -- COALESCE если не нашлось такого пира, и после sum получился результат NULL
                                     FROM transferred_points
                                     WHERE checking_peer=peername
                                     GROUP BY checking_peer), 0)
                               +
                               -- и кол-во потраченных поинтов если пир есть в столбце checked_peer
                           (SELECT COALESCE((SELECT(sum(points_amount)*-1) -- меняем знак
                                             FROM transferred_points
                                             WHERE checked_peer=peername
                                             GROUP BY checked_peer), 0))
            );-- в результате получается сумма, если отрицательная то пир проверялся больше чем проверял
            END;
            $$LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <changeSet id="v-5.0-create-fnc_task5" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task5()
                RETURNS TABLE(Peer varchar, PointsChange integer)
            AS $$
            BEGIN
            RETURN QUERY
            SELECT name AS Peer, fnc_get_peer_points_change(name) AS PointsChange
            FROM (SELECT checking_peer AS name
                  FROM transferred_points
                  UNION DISTINCT
                  SELECT checked_peer AS name
                  FROM transferred_points ) AS names
            ORDER BY Peer;
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    6) Посчитать изменение в количестве пир поинтов каждого пира по таблице, возвращаемой первой функцией из Part 3-->
    <changeSet id="v-5.0-create-fnc_task6" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task6()
                RETURNS TABLE(Peer varchar, PointsChange integer)
            AS $$
            BEGIN
            RETURN QUERY
            SELECT name AS Peer, fnc_get_peer_points_change(name) AS PointsChange
            FROM (SELECT "Peer1" AS name
                  FROM fnc_task1()
                  UNION DISTINCT
                  SELECT "Peer2" AS name
                  FROM fnc_task1()
                 ) AS names
            ORDER BY PointsChange DESC;
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    7) Определить самое часто проверяемое задание за каждый день-->
    <changeSet id="v-5.0-create-helper-fnc_get_max_count_task-task7" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_get_max_count_task(IN date_ date)
                RETURNS integer
            AS $$
            BEGIN
            RETURN (
                WITH checksinday AS
                         (
                             SELECT c.date, c.task, count(*) AS count_
                             FROM checks c
                             GROUP BY 1, 2
                             ORDER BY 1
                         )
                SELECT max(cd.count_)
                FROM checksinday cd
                WHERE cd.date=date_
            );
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <changeSet id="v-5.0-create-fnc_task7" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task7()
                RETURNS TABLE("day" text, task varchar)
            AS $$
            BEGIN
            RETURN QUERY
            SELECT to_char(date, 'DD.MM.YYYY') AS day, t.task
            FROM(SELECT c.date, c.task, count(*) AS count_
                FROM checks c
                GROUP BY 1, 2
                ORDER BY 1) AS t
            WHERE count_=fnc_get_max_count_task(date)
            ORDER BY 1, 2;
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    8) Определить длительность последней P2P проверки-->
    <changeSet id="v-5.0-create-fnc_task8" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task8()
                RETURNS time
            AS $$
                DECLARE
                    -- найти check последней проверки где есть старт и завершение
            check_ integer := ( SELECT p1.check_id
                                        FROM p2p p1
                                        JOIN p2p p2 ON p2.check_id = p1.check_id AND p2.state='Start'
                                        WHERE p1.state!='Start'
                                        ORDER BY p1.time DESC
                                        LIMIT 1);
                    endtime time := (SELECT time FROM p2p
                                    WHERE check_id=check_ AND state!='Start'
                                    ORDER BY time DESC
                                    LIMIT 1);
                    starttime time := (SELECT time FROM p2p
                                        WHERE check_id=check_ AND state='Start'
                                        ORDER BY time DESC
                                        LIMIT 1);
            BEGIN
            RETURN
                    (SELECT endtime-starttime AS last_check_duration);
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    9) Найти всех пиров, выполнивших весь заданный блок задач и дату завершения последнего задания-->
    <changeSet id="v-5.0-create-fnc_task9" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task9(IN blockname VARCHAR)
            RETURNS TABLE(peer varchar, "day" date)
            AS $$
            BEGIN
            RETURN QUERY
                WITH cte AS (
                            SELECT c.peer AS peer, task, c.date AS day, row_number() OVER (PARTITION BY c.peer) AS completed_task_counter
                            FROM p2p p1
                                     JOIN checks c ON c.id = p1.check_id
                                     LEFT JOIN verter v1 ON c.id = v1.check_id AND (v1.state='Success' OR v1.state IS NULL)
                            WHERE c.task LIKE (blockname||'%') and p1.state='Success'
                              and p1.check_id in (SELECT p1.check_id
                                                  FROM p2p p2
                                                           JOIN checks c ON c.id = p2.check_id
                                                           left JOIN verter v2 ON v2.check_id = v1.check_id AND (v1.state='Success' OR v1.state IS NULL)
                                                  WHERE p2.state = 'Start' and p2.check_id = p1.check_id)
                            GROUP BY c.peer, task, date
                        )
            SELECT cte.peer, cte.day
            FROM cte
            WHERE completed_task_counter = (SELECT count(*)
                                            FROM tasks
                                            WHERE tasks.title LIKE (blockname||'%'))
            ORDER BY day DESC;
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    10) Определить, к какому пиру стоит идти на проверку каждому обучающемуся-->
    <changeSet id="v-5.0-create-fnc_task10" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task10 ()
                RETURNS TABLE(peer varchar, recommended_peer varchar)
            AS $$
            BEGIN
            RETURN QUERY
                WITH w_tmp1 AS (SELECT p.nickname AS peer, f.peer2 AS friend, r.recommended_peer AS recommended_peer
                                    FROM peers p
                                    INNER JOIN friends f ON p.nickname = f.peer1
                                    INNER JOIN recommendations r ON f.peer2 = r.peer AND p.nickname != r.recommended_peer
                                    ORDER BY 1,2),
                        w_tmp2 AS (SELECT w_tmp1.peer, w_tmp1.recommended_peer, count(w_tmp1.recommended_peer) AS count_of_recommends
                                    FROM w_tmp1
                                    GROUP BY 1,2
                                    ORDER BY 1,2),
                        w_tmp3 AS (SELECT w_tmp2.peer,
                                          w_tmp2.recommended_peer,
                                          w_tmp2.count_of_recommends,
                                          ROW_NUMBER() OVER (PARTITION BY w_tmp2.peer ORDER BY w_tmp2.count_of_recommends DESC) AS num_of_row_for_each_peer
                                    FROM w_tmp2)
            SELECT w_tmp3.peer, w_tmp3.recommended_peer
            FROM w_tmp3
            WHERE w_tmp3.num_of_row_for_each_peer = 1;
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    11) Определить процент пиров, которые:Приступили к блоку 1,Приступили к блоку 2, Приступили к обоим, Не приступили ни к одному-->
    <changeSet id="v-5.0-create-helper-fnc-PeersStartedBlock-task11" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION PeersStartedBlock("block" varchar)
                RETURNS TABLE("Peer" varchar)
            AS $$
            SELECT DISTINCT ch.peer
            FROM checks ch
            WHERE ch.task LIKE "block" || '%'
                $$ LANGUAGE sql;
        </sql>
    </changeSet>

    <changeSet id="v-5.0-create-fnc_task11" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task11(IN block1 VARCHAR, IN block2 VARCHAR)
                RETURNS TABLE(StartedBlock1 integer, StartedBlock2 integer, StartedBothBlocks integer, DidntStartAnyBlock integer)
            AS $$
                DECLARE
            StartedBlock1 INTEGER := (SELECT count(*) FROM PeersStartedBlock("block1"));
                    StartedBlock2 INTEGER := (SELECT count(*) FROM PeersStartedBlock("block2"));
                    StartedBothBlocks INTEGER := (SELECT count(*) FROM (
                                                                       SELECT "Peer"  FROM PeersStartedBlock("block1")
                                                                       INTERSECT
                                                                       SELECT "Peer"  FROM PeersStartedBlock("block2")
                                                                   ) AS res);
                    DidntStartAnyBlock INTEGER := (SELECT count(*) FROM (
                                                                        SELECT nickname FROM peers
                                                                        EXCEPT
                                                                        (SELECT "Peer" FROM PeersStartedBlock("block1")
                                                                         UNION
                                                                         SELECT "Peer" FROM PeersStartedBlock("block2"))
                                                                    ) AS res1);
                    AllPeers INTEGER := (SELECT count(*) FROM peers);
            BEGIN
            RETURN QUERY
            SELECT StartedBlock1 * 100 / AllPeers AS StartedBlock1,
                   StartedBlock2 * 100 / AllPeers AS StartedBlock2,
                   StartedBothBlocks * 100 / AllPeers AS StartedBothBlocks,
                   DidntStartAnyBlock * 100 / AllPeers AS DidntStartAnyBlock;
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    12) Определить N пиров с наибольшим числом друзей-->
    <changeSet id="v-5.0-create-fnc_task12" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task12(IN fLIMIT integer)
                RETURNS TABLE(peer varchar)
            AS $$
            BEGIN
            RETURN QUERY
            SELECT peer1 AS "Peer", count(*) AS FriendsCount
            FROM (SELECT peer1 FROM friends
                  UNION ALL
                  SELECT peer2 FROM friends) AS res
            GROUP BY peer1
            ORDER BY "FriendsCount" DESC
                LIMIT fLIMIT;
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

    <!--    13) Определить процент пиров, которые когда-либо успешно проходили проверку в свой день рождения-->
    <changeSet id="v-5.0-create-helper-fnc_ChecksCountOnBirthday-task13" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_ChecksCountOnBirthday(fstate varchar)
                RETURNS integer
            AS $$
            SELECT count(*) AS count_
            FROM mv_checks ch JOIN peers p ON p.nickname = ch.peer
            WHERE substring(ch.date::text, 5) = substring(p.birthday::text, 5) AND ch.state = fstate
                $$ LANGUAGE sql;
        </sql>
    </changeSet>

    <changeSet id="v-5.0-create-fnc_task13" author="m3mpm">
        <sql endDelimiter="\nGO"
             splitStatements="true"
             stripComments="true">
            CREATE OR REPLACE FUNCTION fnc_task13()
                RETURNS TABLE(SuccessfulChecks numeric, UnsuccessfulChecks numeric)
            AS $$
                DECLARE
            s integer := (SELECT * FROM fnc_ChecksCountOnBirthday('Success'));
                    f integer := (SELECT * FROM fnc_ChecksCountOnBirthday('Failure'));
            BEGIN
            RETURN QUERY
            SELECT CASE
                       WHEN (s + f) != 0 THEN round(s * 100 / (s + f)::numeric)
                       ELSE 0
                       END AS "SuccessfulChecks",
                   CASE
                       WHEN (s + f) != 0 THEN round(f * 100 / (s + f)::numeric)
                       ELSE 0
                       END AS "UnsuccessfulChecks";
            END;
            $$ LANGUAGE plpgsql;
        </sql>
    </changeSet>

</databaseChangeLog>